# type of finite element
TypeElement = TRIANGLE_LOBATTO

# type of equation
#TypeEquation = HELMHOLTZ_SIPG
TypeEquation = HARMONIC_GALBRUN
#TypeEquation = HARMONIC_GALBRUN_H1
#TypeEquation = HARMONIC_GALBRUN_SIPG
#TypeEquation = HARMONIC_GALBRUN_MODEL_DIV

# path where the meshes are stored
#MeshPath = MAILLAGES/
MeshPath = ./

# frequency and/or pulsation
# Frequency = a b
# sets the pulsation omega = 2*pi*a + b
Frequency = 0.78 0.0

# incident angle teta of the incident plane wave \vec{k} = (k cos teta, k sin teta)
# this angle is in degrees (0, 90, 180 by example)
IncidentAngle = 0.0 0

# file where the mesh is stored (path is added -> MAILLAGES/DisqueCond_QUAD.mesh)
#FileMesh = REGULAR 11  0.0 4.0 -4.0 4.0   1   1 2 3 4
FileMesh = REGULAR 31  -4.0 4.0 -4.0 4.0   1   1 2 3 4
#FileMesh = carre.mesh

#TypeMesh = TRI

# order of space approximation 
OrderDiscretization = 10

#PenalizationDG = -1.0 -1.0
#CoefficientPenalization = AUTO

ThresholdMatrix = 1e-30
#RefinementVertex = 0 0 4 2.0

#AddPML = YES PML_XY 1.0 AUTO
#DampingPML = 2.0

# boundary conditions
ConditionReference = 1 3 PERIODICITY
ConditionReference = 2 4 PERIODICITY
#ConditionReference = 1 3 NEUMANN
#ConditionReference = 1 2 3 4 ABSORBING
#ConditionReference = 1 3 DIRICHLET

#StaticCondensation = YES

#MateriauDielec = 1 ISOTROPE 1.5 0 0.1  2.5 0.8 1.0

# Galbrun MateriauDielec = 1 ISOTROPE vx vy sigma rho0 c0 p0
#MateriauDielec = 1 ISOTROPE 0.75 0 0.1  2.5 0.8 1.0
# physical coefficient
#MateriauDielec = 1 ISOTROPE SAME_MESH carre.mesh 0 0.1 mx.don 10 1.0 \
#                            SAME_MESH carre.mesh 0 0.1 my.don 10 1.0 \
#                            0.1 \
#                            SAME_MESH carre.mesh 0 1.0 rho0.don 10 1.0 \
#                            SAME_MESH carre.mesh 0 1.0 c0.don 10 1.0 \
#                            SAME_MESH carre.mesh 0 1.0 p0.don 10 1.0

MateriauDielec = 1 ISOTROPE USER 0.0 0.5 1.0 USER 0.0 0.5 1.0 \
                            USER 0.0 1.0 1.0 USER 0.0 1.0 1.0 USER 0.0 1.0 1.0 USER 0.0 1.0 1.0

ApplyConvectiveCorrectionSource = YES

# Eigenvalue = YES mode center_spectrum nb_modes
#Eigenvalue = YES SHIFTED 0.4 40

# diffracted field of a plane wave exp(ikx)
#TypeSource = SRC_DIFFRACTED_FIELD PLANE_WAVE
#TypeSource = SRC_TOTAL_FIELD PLANE_WAVE
#TypeSource = SRC_VOLUME GAUSSIAN 0.5 0.8 1.0 2.0
TypeSource = SRC_VOLUME GAUSSIAN 0 0 1.0 2.0

#TypeSource = SRC_DIRAC

#Polarization = 0 0.0 1.0 0.0 0.0
#Polarization = 0 0.0 1.0 0.0 0.0
Polarization = 1.0 0.0

# automatic resolution of the linear system (selection of the optimal algorithm)
TypeSolver = AUTO
#TypeResolution = COCG IDENTITY
#PivotThreshold = 1e-3

# non-linear solver to solve Fi(X) = Y
NonLinearSolver = MINPACK 1e-15 50

# snapshots on a 2-D regular grid 200x200
SismoPlane = AUTO 1000 1000
# files where the diffracted and total field will be stored (extension .dat is added)
FileOutputPlane = diffracTest totalTest

# ASCII or BINARY (binary needs less memory), FLOAT or DOUBLE (simple or double precision)
OutputFormat = BINARY DOUBLE

# we want to know the solution U and gradients
ElectricOrMagnetic = -5

# put YES if you want to store the matrix on the disk
StorageMatrix = NO mat.dat

# level of display (-1 for no display, 0 for minimal display, 10 for debug ...)
PrintLevel = 10 

DataNonRegressionTest = helmholtz2D.x 0 8
